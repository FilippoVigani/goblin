{
  "_args": [
    [
      {
        "raw": "rpi-gpio@~2.1.2",
        "scope": null,
        "escapedName": "rpi-gpio",
        "name": "rpi-gpio",
        "rawSpec": "~2.1.2",
        "spec": ">=2.1.2 <2.2.0",
        "type": "range"
      },
      "C:\\Users\\filippo\\Documents\\Projects\\goblin\\dev\\server"
    ]
  ],
  "_from": "rpi-gpio@~2.1.2",
  "_hasShrinkwrap": false,
  "_id": "rpi-gpio@2.1.2",
  "_location": "/rpi-gpio",
  "_nodeVersion": "10.14.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rpi-gpio_2.1.2_1543440868487_0.5076423149543305"
  },
  "_npmUser": {
    "name": "jamesbarwell",
    "email": "jb@jamesbarwell.co.uk"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rpi-gpio@~2.1.2",
    "scope": null,
    "escapedName": "rpi-gpio",
    "name": "rpi-gpio",
    "rawSpec": "~2.1.2",
    "spec": ">=2.1.2 <2.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-2.1.2.tgz",
  "_shasum": "4159cc1f6ffe7572bddd98e1149b400403afbed7",
  "_shrinkwrap": null,
  "_spec": "rpi-gpio@~2.1.2",
  "_where": "C:\\Users\\filippo\\Documents\\Projects\\goblin\\dev\\server",
  "author": {
    "name": "James Barwell",
    "email": "jb@jamesbarwell.co.uk"
  },
  "bugs": {
    "url": "https://github.com/JamesBarwell/rpi-gpio.js/issues"
  },
  "dependencies": {
    "async-retry": "^1.2.1",
    "debug": "^3.1.0",
    "epoll": "^2.0.3"
  },
  "description": "Control Raspberry Pi GPIO pins with node.js",
  "devDependencies": {
    "istanbul": "^0.4.5",
    "mocha": "^5.1.1",
    "sinon": "^5.0.7"
  },
  "directories": {
    "test": "test",
    "integration": "integration"
  },
  "dist": {
    "integrity": "sha512-6Enivqq2hQ4qeBMXSihZEDvGuFAWvAh4n3P6iPMg9VZMT1LnYalIcKdlKDuHMlfj4gvXQPF1A52x63vl0ZVFCw==",
    "shasum": "4159cc1f6ffe7572bddd98e1149b400403afbed7",
    "tarball": "https://registry.npmjs.org/rpi-gpio/-/rpi-gpio-2.1.2.tgz",
    "fileCount": 7,
    "unpackedSize": 61948,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb/wnkCRA9TVsSAnZWagAA/HYP/iaET/ajCcaCySsC2noC\n3LNOaDB1wJ5RnubnYFN9fdHS3rv7gmw1KFKUaRF75UnaGsV/faE46d66TYLI\nUnefu6B7/R3AwjkZR14bngG5jxd5it2PYHHthAk4iNBToChXRPx/Kx2jn4Ou\ndlhZ/uT1n0/ykcSssXGYa+fsXow6ewr96RjWN41xtp+UoQ/5fOLi5HvM1x2a\n2hPl8+TOtcIWFe9ALk+ErC3MJGF0vG+ZL3BimBJOLmntj9KPXfs7ph+b4N0e\nPMavBgJ5RhAw2Vbo1qV/Y/5DzJDRzIlkFnUpYqA1fGp4EEeNPtuwgjCI38dC\naLOsXyau0EdwzMcj33uHmdjxJBYZN8xmzlQAtAW0+mFJgldnoRLxFwadGk26\nIbIKe4+12dSQzyEY6OkoHwXsx8mM3ybRon3Js5hjmiaUpNwR7rbg4R33DteM\n0Xwekw2P7KyTsvtA5qjeGjORSJDZ1xW959WEnKiU0DPSJ1Imb1Aw2NXf45SZ\nSeLfH4Wib5t86n2RibFJMBdW70bCg7TSm5j9w80hbog5S57HkDybX8z8pR7U\nG/op404Mqvs6ZTRu96gXyt29uOO3qdr77sRduqZHBIJSK4wxFKWtyxYdMLgT\na42vwP/f1rFngwmpJwCRjCcDjPqhAoZQxHoLtbkUDTzPjFkameyxNiTyOp46\nu3wt\r\n=lFWk\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "c0d8e780e89a9f24d288489bacb484104e9e24c1",
  "homepage": "https://github.com/JamesBarwell/rpi-gpio.js#readme",
  "keywords:": [
    "raspberry",
    "pi",
    "gpio"
  ],
  "license": "MIT",
  "main": "rpi-gpio.js",
  "maintainers": [
    {
      "name": "jamesbarwell",
      "email": "jb@jamesbarwell.co.uk"
    }
  ],
  "name": "rpi-gpio",
  "optionalDependencies": {},
  "readme": "rpi-gpio.js\n==========\n\nControl Raspberry Pi GPIO pins with node.js\n\n[![Build Status](https://travis-ci.org/JamesBarwell/rpi-gpio.js.svg?branch=master)](https://travis-ci.org/JamesBarwell/rpi-gpio.js)\n[![NPM version](https://badge.fury.io/js/rpi-gpio.svg)](http://badge.fury.io/js/rpi-gpio)\n\n## Supported hardware\n\n* Raspberry Pi 1 Model A\n* Raspberry Pi 1 Model A+\n* Raspberry Pi 1 Model B\n* Raspberry Pi 1 Model B+\n* Raspberry Pi 2 Model B\n* Raspberry Pi 3 Model B\n* Raspberry Pi Zero\n* Raspberry Pi Zero W\n\n## Supported node versions\n\nrpi-gpio 1.x is no longer supported. Please use 2.x unless you need to run with an old version of node.\n\n| node version | rpi-gpio 1.x | rpi-gpio 2.x + |\n| ------------ | ------------ | -------------- |\n| 0.10         | Yes          | No             |\n| 0.12         | Yes          | No             |\n| 4            | Yes          | Yes            |\n| 6            | Yes          | Yes            |\n| 8            | Yes          | Yes            |\n| 10           | No           | Yes            |\n\n## Setup and install\n\nSee this guide on how to get [node.js running on Raspberry Pi](http://thisdavej.com/beginners-guide-to-installing-node-js-on-a-raspberry-pi/#install-node).\n\nThis module can then be installed with npm:\n```\nnpm install rpi-gpio\n```\n\n### Dependency\nPlease note that this module has a dependency on [epoll](https://github.com/fivdi/epoll) and that currently it is only possible to build and develop the module on Linux systems.\n\nIf you are having trouble installing this module make sure you are running gcc/g++ `-v 4.8` or higher. [Here](https://github.com/fivdi/onoff/wiki/Node.js-v4-and-native-addons) is an installation guide.\n\n## Usage\nBefore you can read or write, you must use `setup()` to open a channel, and must specify whether it will be used for input or output. Having done this, you can then read in the state of the channel or write a value to it using `read()` or `write()`.\n\nAll of the functions relating to the pin state within this module are asynchronous, so where necessary - for example in reading the value of a channel - a callback must be provided. This module inherits the standard [EventEmitter](http://nodejs.org/api/events.html), so you may use its functions to listen to events.\n\n### Pin naming\nPlease be aware that there are multiple ways of referring to the pins on the Raspberry Pi. The simplest and default way to use the module is refer to them by physical position, using the diagrams on [this page](http://elinux.org/RPi_Low-level_peripherals). So holding the Raspberry Pi such that the GPIO header runs down the upper-right side of the board, if you wished to address GPIO4 (which is in column 1 and row 4), you would setup pin 7. If you wish instead to refer to the pins by their GPIO names (known as BCM naming), you can use the `setMode` command described in the API documentation below.\n\n### Running without sudo\nThis module will work without use of the `sudo` command, as long as the user running the node process belongs to the `gpio` group. You can check the current user's groups by running the command `groups`, or `groups <user>` for another user. If you are not already a member of the `gpio` group, you can add yourself or another user by running `sudo adduser <user> gpio`.\n\n\n## API (Error-first)\n\nThe default API uses the node-style error-first callbacks to perform asynchronous functions. Most of these methods take a callback, and that callback should check for an error in its first argument. It is important to check for an error after each command, else your code will continue to run and will likely fail in hard to understand ways.\n\n### Methods\n\n#### setup(channel [, direction, edge], callback)\nSets up a channel for read or write. Must be done before the channel can be used.\n* channel: Reference to the pin in the current mode's schema.\n* direction: The pin direction, pass either DIR_IN for read mode or DIR_OUT for write mode. You can also pass DIR_LOW or DIR_HIGH to use the write mode and specify an initial state of 'off' or 'on' respectively. Defaults to DIR_OUT.\n* edge: Interrupt generating GPIO chip setting, pass in EDGE_NONE for no interrupts, EDGE_RISING for interrupts on rising values, EDGE_FALLING for interrupts on falling values or EDGE_BOTH for all interrupts.\nDefaults to EDGE_NONE.\n* callback: Provides Error as the first argument if an error occurred.\n\n#### read(channel, callback)\nReads the value of a channel.\n* channel: Reference to the pin in the current mode's schema.\n* callback: Provides Error as the first argument if an error occured, otherwise the pin value boolean as the second argument.\n\n#### write(channel, value [, callback])\nWrites the value of a channel.\n* channel: Reference to the pin in the current mode's schema.\n* value: Boolean value to specify whether the channel will turn on or off.\n* callback: Provides Error as the first argument if an error occured.\n\n#### setMode(mode)\nSets the channel addressing schema.\n* mode: Specify either Raspberry Pi or SoC/BCM pin schemas, by passing MODE_RPI or MODE_BCM. Defaults to MODE_RPI.\n\n#### input()\nAlias of read().\n\n#### output()\nAlias of write().\n\n#### destroy()\nTears down any previously set up channels. Should be run when your program stops, or needs to reset the state of the pins.\n\n#### reset()\nTears down the module state - used for testing.\n\n### Events\nSee Node [EventEmitter](http://nodejs.org/api/events.html) for documentation on listening to events.\n\n#### change\nEmitted when the value of a channel changed\n* channel\n* value\n\n## API (Promises)\n\nThis API exposes a Promises interface to the module. All of the same functions are available, but do not take callbacks and instead return a Promise.\n\nThe Promises interface is available in the `promise` namespace, e.g.:\n\n```js\nvar gpio = require('rpi-gpio')\nvar gpiop = gpio.promise;\n\ngpiop.setup(7, gpio.DIR_OUT)\n    .then(() => {\n        return gpiop.write(7, true)\n    })\n    .catch((err) => {\n        console.log('Error: ', err.toString())\n    })\n```\n\n\n## Examples\n\nSee the `examples` directory included in this project.\n\nPlease note that all examples are intended to be directly runnable from the code repository, so they always require the module in at the top using `var gpio = require(../rpi-gpio)`. In reality, you will want to include the module using `var gpio = require('rpi-gpio')`\n\n## Contributing\nContributions are always appreciated, whether that's in the form of bug reports, pull requests or helping to diagnose bugs and help other users on the issues page.\n\nDue to the nature of this project it can be quite time-consuming to test against real hardware, so the automated test suite is all the more important. I will not accept any pull requests that cause the build to fail, and probably will not accept any that do not have corresponding test coverage.\n\nYou can run the tests with npm:\n```\nnpm test\n```\nand create a coverage report with:\n```\nnpm run coverage\n```\nThere is also an integration test that you can run on Raspberry Pi hardware, having connected two GPIO pins across a resistor. The command to run the test will provide further instructions on how to set up the hardware:\n```\nnpm run int\n```\n\nThe tests use [mochajs](http://mochajs.org) as the test framework, and [Sinon.JS](http://sinonjs.org) to stub and mock out file system calls.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JamesBarwell/rpi-gpio.js.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha",
    "int": "mocha test/integration",
    "spec": "mocha --reporter spec",
    "test": "mocha"
  },
  "version": "2.1.2"
}
