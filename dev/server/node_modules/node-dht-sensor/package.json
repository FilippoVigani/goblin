{
  "_args": [
    [
      {
        "raw": "node-dht-sensor@~0.0.34",
        "scope": null,
        "escapedName": "node-dht-sensor",
        "name": "node-dht-sensor",
        "rawSpec": "~0.0.34",
        "spec": ">=0.0.34 <0.1.0",
        "type": "range"
      },
      "C:\\Users\\filippo\\Documents\\Projects\\goblin\\dev\\server"
    ]
  ],
  "_from": "node-dht-sensor@>=0.0.34 <0.1.0",
  "_id": "node-dht-sensor@0.0.34",
  "_inCache": true,
  "_location": "/node-dht-sensor",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-dht-sensor_0.0.34_1518657141274_0.4662679198154607"
  },
  "_npmUser": {
    "name": "momenso",
    "email": "momenso@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-dht-sensor@~0.0.34",
    "scope": null,
    "escapedName": "node-dht-sensor",
    "name": "node-dht-sensor",
    "rawSpec": "~0.0.34",
    "spec": ">=0.0.34 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-dht-sensor/-/node-dht-sensor-0.0.34.tgz",
  "_shasum": "b8776eaf4c057075500596fed4374e963e5ac820",
  "_shrinkwrap": null,
  "_spec": "node-dht-sensor@~0.0.34",
  "_where": "C:\\Users\\filippo\\Documents\\Projects\\goblin\\dev\\server",
  "author": {
    "name": "David Momenso"
  },
  "bugs": {
    "url": "https://github.com/momenso/node-dht-sensor/issues"
  },
  "dependencies": {
    "nan": "2.8.0"
  },
  "description": "Reads data from DHT sensors on Raspberry Pi",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-dYyNOdIEBm4v34OjGhrz3JJzXXZ0OTtvaK3fPWo7yFhUkcBFF4THfBf5kxJ8IfQ/StwP5xqFkFP4M1xZM1CtBg==",
    "shasum": "b8776eaf4c057075500596fed4374e963e5ac820",
    "tarball": "https://registry.npmjs.org/node-dht-sensor/-/node-dht-sensor-0.0.34.tgz",
    "fileCount": 12,
    "unpackedSize": 31151
  },
  "gitHead": "f62242cec3ee8a036fc953afaa0b0dfd0d87c539",
  "homepage": "https://github.com/momenso/node-dht-sensor#readme",
  "license": "LGPL-3.0",
  "main": "./build/Release/node_dht_sensor",
  "maintainers": [
    {
      "name": "momenso",
      "email": "momenso@gmail.com"
    }
  ],
  "name": "node-dht-sensor",
  "optionalDependencies": {},
  "readme": "# node-dht-sensor\n\nThis node.js module supports querying air temperature and relative humidity from a compatible DHT sensor.\n\n## Installation\n``` bash\n$ npm install node-dht-sensor\n```\n\n## Usage\n\nThis module depends on the [BCM2835](http://www.airspayce.com/mikem/bcm2835/) library that must be installed on your board before you can actually use this module.\n\nTo initialize the sensor, you have to specify the sensor type and the [GPIO pin](https://www.raspberrypi.org/documentation/usage/gpio/) where the sensor is connected to. It should work for DHT11, DHT22 and AM2302 sensors.\n\nYou should use sensorType value to match the sensor as follows:\n\n| Sensor          | sensorType value |\n|-----------------|:----------------:|\n| DHT11           | 11               |\n| DHT22 or AM2302 | 22               |\n\nIf the initialization succeeds when you can call the read function to obtain the latest readout from the sensor. Readout values contains a temperature and a humidity property.\n\n### First Example\n\n![example1](https://cloud.githubusercontent.com/assets/420851/20246902/1a03bafc-a9a8-11e6-8158-d68928b2e79f.png)\n\nThis sample queries a DHT22 sensor connected to the GPIO 4 and prints out the result on the console.\n\n``` javascript\nvar sensor = require('node-dht-sensor');\n\nsensor.read(22, 4, function(err, temperature, humidity) {\n    if (!err) {\n        console.log('temp: ' + temperature.toFixed(1) + '°C, ' +\n            'humidity: ' + humidity.toFixed(1) + '%'\n        );\n    }\n});\n```\n\n### Multiple Sensors Example\n\n![example2](https://cloud.githubusercontent.com/assets/420851/20246914/554d72c4-a9a8-11e6-9162-ae51ecdf4212.png)\n\nThe following example shows a method for querying multiple sensors connected to the same Raspberry Pi. For this example, we have two sensors:\n\n1. A DHT11 sensor connected to GPIO 17\n2. High-resolution DHT22 sensor connected to GPIO 4\n\n``` javascript\nvar sensorLib = require(\"node-dht-sensor\");\n\nvar sensor = {\n    sensors: [ {\n        name: \"Indoor\",\n        type: 11,\n        pin: 17\n    }, {\n        name: \"Outdoor\",\n        type: 22,\n        pin: 4\n    } ],\n    read: function() {\n        for (var a in this.sensors) {\n            var b = sensorLib.read(this.sensors[a].type, this.sensors[a].pin);\n            console.log(this.sensors[a].name + \": \" +\n              b.temperature.toFixed(1) + \"°C, \" +\n              b.humidity.toFixed(1) + \"%\");\n        }\n        setTimeout(function() {\n            sensor.read();\n        }, 2000);\n    }\n};\n\nsensor.read();\n```\n\n### Reference for building from source\n\nStandard node-gyp commands are used to build the module. So, just make sure you have node and node-gyp as well as the Broadcom library to build the project.\n\n1. Download BCM2835 library and follow installation  [instructions](http://www.airspayce.com/mikem/bcm2835/).\n\n2. In case, you don't have node-gyp, install it first:\n   ``` bash\n   $ sudo npm install node-gyp -g\n   ```\n\n3. Generate the configuration files\n   ``` bash\n   $ node-gyp configure\n   ```\n\n4. Build the component\n   ``` bash\n   $ node-gyp build\n   ```\n\n### Tracing and Debugging\n\nVerbose output from the module can be enabled by by specifying the ```--dht_verbose=true``` flag when installing the node via npm.\n\n``` bash\n$ npm install node-dht-sensor --dht_verbose=true\n```\n\nif you are interested in enabling trace when building directly from source you can enable the ```-Ddht_verbose``` flag when running node-gyp configure.\n\n``` bash\n$ node-gyp configure -- -Ddht_verbose=true\n```\n### Appendix A: Quick Node.js installation guide\n\nThere are many ways you can get Node.js installed on your Raspberry Pi. Here is just one of way you can do it.\n``` bash\n$ wget https://nodejs.org/dist/v8.9.1/node-v8.9.1-linux-armv7l.tar.xz\n$ tar xvfJ node-v8.9.1-linux-armv7l.tar.xz\n$ sudo mv node-v8.9.1-linux-armv7l /opt\n$ sudo update-alternatives --install \"/usr/bin/node\" \"node\" \"/opt/node-v8.9.1-linux-armv7l/bin/node\" 1\n$ sudo update-alternatives --set node /opt/node-v8.9.1-linux-armv7l/bin/node\n$ sudo update-alternatives --install \"/usr/bin/npm\" \"npm\" \"/opt/node-v8.9.1-linux-armv7l/bin/npm\" 1\n```\nPlease note that you may have to use armv6l instead of arm7l if you have an early Raspberry Pi model.\n\n### References\n\n[1]: Node.js download - https://nodejs.org/en/download/\n\n[2]: BCM2835 - http://www.airspayce.com/mikem/bcm2835/\n\n[3]: Node.js native addon build tool - https://github.com/TooTallNate/node-gyp\n\n[4]: GPIO: Raspbery Pi Models A and B - https://www.raspberrypi.org/documentation/usage/gpio/\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/momenso/node-dht-sensor.git"
  },
  "scripts": {
    "install": "node-gyp configure",
    "postinstall": "node-gyp build",
    "preinstall": "./check-lib.sh"
  },
  "version": "0.0.34"
}
